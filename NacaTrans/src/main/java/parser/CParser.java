/*
 * NacaRTTests - Naca Tests for NacaRT support.
 *
 * Copyright (c) 2005, 2006, 2007, 2008 Publicitas SA.
 * Licensed under GPL (GPL-LICENSE.txt) license.
 */
/*
 * Created on Jul 16, 2004
 *
 * To change the template for this generated file go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
package parser;

import javax.xml.parsers.*;

import org.w3c.dom.*;

import utils.Transcoder;

import lexer.*;


/*
			builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
			doc = builder.newDocument();
			Element elem = doc.createElement("SMS");
			elem.setAttribute("Message", csMessage);
			elem.setAttribute("Originator", csMSISDN);
			elem.setAttribute("Destinator", csShortID);
			doc.appendChild(elem);

 */


/**
 * @author U930CV
 *
 * To change the template for this generated type comment go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
public abstract class CParser<T extends CBaseElement>
{
	public CGlobalCommentContainer m_CommentContainer = new CGlobalCommentContainer() ;
	
	// entry point for parsing
	// get a CTokenList as input, this object is generated by CLexer	 
	public boolean StartParsing(CTokenList lstTokens) 
	{
		if (lstTokens == null || lstTokens.GetNbTokens()==0)
		{
			return false ;
		}
		
		// start parsing
		lstTokens.StartIter() ;
		return DoParsing(lstTokens) ;
	}

	protected abstract boolean DoParsing(CTokenList lstTokens) ;

	public T GetRootElement()
	{
		return m_eRoot ;
	}
	
	public Document Export()
	{
		if (m_eRoot == null)
		{
			return null ;
		}
		// init members
		try
		{
			DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
			Document doc = builder.newDocument();
			Element eProgram = m_eRoot.Export(doc) ;
			doc.appendChild(eProgram) ;
			return doc ;
		}
		catch (ParserConfigurationException e)
		{
			return null ;
		}
//		catch (NullPointerException e)
//		{
//			Transcoder.logError("Errors found: Could not generate output");
//			return null;
//		}
	}
		
	protected T m_eRoot = null ;
	
	public void setRoot(T tRoot)
	{
		m_eRoot = tRoot;
	}
	
	public void Clear()
	{
		m_CommentContainer.Clear();
		m_eRoot.Clear();
	} 
}
